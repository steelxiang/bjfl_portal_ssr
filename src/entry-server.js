import { basename } from 'node:path'
import { renderToString } from 'vue/server-renderer'
import { createApp } from './main-ssr'
import { createMemoryHistory } from 'vue-router'
import { setup } from "@css-render/vue3-ssr"
import { getWindow } from 'ssr-window'
import { setupI18n } from '@/locale';
import defaultSettings from './settings'

function getHtmlInfo(url, router) {
  const to = router.resolve(url)
  let lang;
  if(to.params.lang === 'en'){
    lang = 'en-US';
  }else{
    lang = 'zh-CN'
    // if(to.params.lang != ''){
    //   next({path: to.path, params: to.params});
    // }
  }
  // document.querySelector('html')?.setAttribute('lang',lang);
  // 设置页面title
  //const lang = useLocaleStoreWithOut().getLocale;
  let title = '';
  if(to.meta.title === '首页' || 'Home' === to.meta.title) {
    title = ''
  }else{
    title = lang =='zh-CN'? to.meta.title + '-': to.meta.titleEn+'-';
  }
  title = lang === 'zh-CN'?title +defaultSettings.title:title+ defaultSettings.titleEn;
  const keywords = lang === 'zh-CN'? defaultSettings.keyword: defaultSettings.keywordEn;
  const desc = lang == 'zh-CN'? defaultSettings.desc: defaultSettings.descEn;
  return {
    lang,
    title: title,
    keywords,
    desc,
  }
}

export async function render(url, manifest) {
  const { app, router } = await createApp(createMemoryHistory(""))
  getWindow().location.pathname = url
  const htmlInfo = getHtmlInfo(url, router); 
  await setupI18n(app)
  const { collect } = setup(app)

  // set the router to the desired URL before rendering
  await router.push(url)
  await router.isReady()

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const ctx = {}
  const html = await renderToString(app, ctx)

  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  const preloadLinks = renderPreloadLinks(ctx.modules, manifest)
  const cssHtml = collect()
  return [html, preloadLinks, cssHtml, htmlInfo]
}

function renderPreloadLinks(modules, manifest) {
  let links = ''
  const seen = new Set()
  modules.forEach((id) => {
    const files = manifest[id]
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file)
          const filename = basename(file)
          if (manifest[filename]) {
            for (const depFile of manifest[filename]) {
              links += renderPreloadLink(depFile)
              seen.add(depFile)
            }
          }
          links += renderPreloadLink(file)
        }
      })
    }
  })
  return links
}

function renderPreloadLink(file) {
  if (file.endsWith('.js')) {
    return `<link rel="modulepreload" crossorigin href="${file}">`
  } else if (file.endsWith('.css')) {
    return `<link rel="stylesheet" href="${file}">`
  } else if (file.endsWith('.woff')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`
  } else if (file.endsWith('.woff2')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`
  } else if (file.endsWith('.gif')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/gif">`
  } else if (file.endsWith('.jpg') || file.endsWith('.jpeg')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/jpeg">`
  } else if (file.endsWith('.png')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/png">`
  } else {
    // TODO
    return ''
  }
}